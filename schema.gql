# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TapeUser {
  tapeUserId: Int!
  tapeId: Int!
  userId: Int!
  tape: Tape
  byStatus(tapeUserStatus: TapeUserStatus!): TapeUserHistory
}

"""Tape user status."""
enum TapeUserStatus {
  Downloaded
  View
  WishList
}

type TapeUserHistoryDetail {
  tapeUserHistoryDetailId: Int!
  tapeUserHistoryId: Float!
  place: Place!
}

"""The supported places."""
enum Place {
  Online
  Television
  Downloaded
  MovieTheater
  VideoClub
  Netflix
  AppleTv
  DisneyPlus

  """Amazon Prime Video."""
  PrimeVideo
  HBO @deprecated(reason: "Service no longer available.")
  Filmin
  HBOMax
  MovistarPlus
  Mitele
}

type TapeUserHistory {
  tapeUserHistoryId: Int!
  tapeUserId: Float!
  tapeUserStatus: TapeUserStatus!
  addPlace(place: Place!): TapeUserHistoryDetail!
}

"""stored tape"""
type Tape {
  originalTitle: String!
  objectId: String!
  tapeId: Int
  detail: TapeDetail
  countries: [Country!]
  sounds: [Sound!]
  languages: [Language!]
  genres: [Genre!]
  ranking: Ranking
  tvShow: TvShow
  tvShowChapter: TvShowChapter
  people: [CreditOutput!]
  titles: [TitleOutput!]
  premieres: [PremiereOutput!]
  locations: [Location!]
  certifications: [CertificationOutput!]
  tags: [Tag!]
}

"""stored country"""
type Country {
  countryId: Int
  isoCode: String
  officialName: String!
}

"""tape certification output"""
type CertificationOutput {
  certification: String!
  country: Country
  tapeCertificationId: Int!
}

"""people alias"""
type PeopleAlias {
  alias: String!
  peopleId: Int!
  peopleAliasId: Int
}

"""people detailed information"""
type PeopleDetail {
  birthDate: Date
  birthPlace: String
  country: Country
  deathDate: Date
  deathPlace: String
  gender: String
  havePhoto: Boolean
  height: Int
  peopleId: Int!
  skip: Boolean
}

"""Date custom scalar type"""
scalar Date

"""people main model"""
type People {
  aliases: [PeopleAlias!]
  detail: PeopleDetail
  fullName: String!
  objectId: String!
  peopleId: Int
}

"""people role"""
type Role {
  roleId: Int!
  role: String!
}

"""tape people role output"""
type CreditOutput {
  people: People!
  role: Role!
  tapePeopleRoleId: Int!
  character: String
}

"""premiere"""
type PremiereOutput {
  country: Country
  date: Date!
  place: String
  premiereId: Int!
  observation: String
}

"""stored language"""
type Language {
  languageId: Int
  name: String!
}

"""tape title output"""
type TitleOutput {
  country: Country
  language: Language
  observations: String
  tapeTitleId: Int!
  title: String!
}

"""stored genre"""
type Genre {
  genreId: Int
  name: String!
}

"""stored locations"""
type Location {
  locationId: Int!
  place: String!
}

"""stored ranking"""
type Ranking {
  realScore: Float!
  objectId: ID!
  score: Float!
  votes: Int!
}

"""stored sound"""
type Sound {
  description: String!
  soundId: Int
}

"""stored country"""
type Tag {
  keyword: String!
  tagId: Int!
}

"""stored tape detail"""
type TapeDetail {
  budget: Float
  color: String
  duration: Int
  cover: Boolean
  adult: Boolean
  tvShow: Boolean
  tvShowChapter: Boolean
  year: Int
  tapeId: Int!
}

"""stored tv show chapter"""
type TvShowChapter {
  chapter: Int!
  season: Int!
  tapeId: Int!
  tvShowTapeId: Int!
}

"""stored tv show"""
type TvShow {
  finished: Boolean!
  tapeId: Int!
}

"""count inserted rows"""
type CounterOutput {
  total: Int!
  added: Int!
}

"""ranking"""
type ScrappedRanking {
  realScore: Float!
  score: Float!
  votes: Int!
}

"""tape import result"""
type ImportOutput {
  tapeId: Int!
  objectId: String!
  time: Float!
  countries: CounterOutput!
  sounds: CounterOutput!
  languages: CounterOutput!
  genres: CounterOutput!
  titles: CounterOutput!
  premieres: CounterOutput!
  locations: CounterOutput!
  certifications: CounterOutput!
  keywords: CounterOutput!
  ranking: ScrappedRanking
  finished: Boolean
  tvShowTapeId: Int
  chapter: Int
  season: Int
  directors: Int
  writers: Int
  cast: Int
}

"""episode data"""
type ScrappedEpisode {
  chapter: Int!
  season: Int!
  tvShowID: Int!
}

"""person"""
type ScrappedPerson {
  fullName: String!
  ID: Int!
  url: URL!
  alias: String
}

"""URL custom scalar type"""
scalar URL

"""credit, cast and crew member"""
type ScrappedCredit {
  person: ScrappedPerson!
  role: String
  character: String
}

"""premiere"""
type ScrappedPremiere {
  country: String!
  date: Date!
  detail: String
  place: String
}

"""tape title"""
type ScrappedTitle {
  country: String
  language: String
  observations: String
  title: String!
}

"""parental guide tape certifications"""
type ScrappedCertification {
  certification: String!
  country: String!
}

"""tape"""
type ScrappedTape {
  originalTitle: String!
  budget: Float
  colors: [String!]
  currency: Int
  duration: Int!
  isTvShow: Boolean!
  isTvShowChapter: Boolean!
  year: Int!
  countries: [String!]
  languages: [String!]
  genres: [String!]
  sounds: [String!]
  locations: [String!]
  credits: [ScrappedCredit!]
  premieres: [ScrappedPremiere!]
  titles: [ScrappedTitle!]
  certifications: [ScrappedCertification!]
  keywords: [String!]
  ID: Int!
  url: URL!
  ranking: ScrappedRanking
  episode: ScrappedEpisode
}

type Query {
  getScrappedTape(imdbNumber: Int!): ScrappedTape!
  tape(tapeId: Int!): Tape!
}

type Mutation {
  importTape(imdbNumber: Int!): ImportOutput!
  importEpisodes(imdbNumber: Int!, seasonNumber: Int!): [ImportOutput!]!
  editTapeUser(tapeId: Int!, userId: Int!): TapeUser!
  editSeasonUser(tvShowTapeId: Int!, seasonNumber: Int!, userId: Int!): [TapeUser!]!
}